<?php/** * Implements hook_entity_info() */function car_entity_info() {    return array(      'car' => array(        'label' => t('Car'),        'entity class' => 'Entity',        'controller class' => 'EntityAPIController',        'views controller class' => 'EntityDefaultViewsController',        'base table' => 'cartbl',        'uri callback' => 'car_uri',        'entity keys' => array(          'id' => 'carid',          'label' => 'model'        ),        'fildable' => TRUE,        'admin ui' => array(          'path' => 'admin/structure/car'        ),        'access callback' => 'car_access',        'module' => 'car',        'bundles' => array(          'car' => array(            'label' => 'Car bundle',            'admin' => array(              'path' => 'admin/structure/car/list',              'access arguments' => array('administer car entities'),            ),          ),        ),      ),    );}/** * Implements hook_menu() */function car_menu() {    $items['admin/structure/car/list'] = array(      'title' => 'List',      'type' => MENU_DEFAULT_LOCAL_TASK,      'weight' => -10,    );    $items['car/%car'] = array(      'title' => t('View car information'),      'page callback' => 'car_base_view',      'page arguments' => array(1),      'access arguments' => array('view any car entities'),    );    return $items;}/** * Implements hook_entity_prepare_view() */function car_entity_prepare_view($entities, $type, $langcode) {    if ($type == "car") {        foreach ($entities as $entity) {            if (isset($entity->car_image['und'][0]['fid'])) {                $file = file_load($entity->car_image['und'][0]['fid']);                if (isset($file->uri)) {                    $entity->car_image['und'][0]['uri'] = $file->uri;                }            }        }    }}/** * Implements view callback function */function car_base_view($entity, $view_mode = 'full') {    $entity_type = 'car';    $entity->content = array(      '#view_mode' => $view_mode,      '#language' => NULL,    );    //lets the fields load any data they need before viewing.    field_attach_prepare_view($entity_type, array($entity->carid => $entity), $view_mode);    //call entity_prepare_view() so it can invoke hook_entity_prepare_view()    entity_prepare_view($entity_type, array($entity->carid => $entity));    //field_attach_view() generates the content for the fields.    $entity->content += field_attach_view($entity_type, $entity, $view_mode);    //set up some of our own data.    $entity->content['color'] = array(      '#type' => 'item',      '#title' => t('Car color'),      '#markup' => $entity->color,    );    $entity->content['model'] = array(      '#type' => 'item',      '#title' => t('Model'),      '#markup' => $entity->model,    );    $entity->content['year'] = array(      '#type' => 'item',      '#title' => t('Year'),      '#markup' => $entity->year,    );    $entity->content['mileage'] = array(      '#type' => 'item',      '#title' => t('Mileage'),      '#markup' => $entity->mileage . ' km.',    );    // Now to invoke some hooks. We need the language code for    // hook_entity_view(), so let's get that.    global $language;    $langcode = $language->language;    // And now invoke hook_entity_view().    module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);    // Now invoke hook_entity_view_alter().    drupal_alter(array('car_base_view', 'entity_view'), $entity->content, $entity_type);    // And finally return the content.    return $entity->content;}/** * Adds our theme specificiations to the Theme Registry. */function car_theme($existing, $type, $theme, $path) {    return array(      'car' => array(        'variables' => array('car' => null),        'template' => 'car',      ),    );}/** * Implements hook_permission(). */function car_permission() {    $permissions = array(      'administer car entities' => array(        'title' => t('Administer car'),        'description' => t('Allows users to administer car entity.'),        'restrict access' => TRUE,      ),      'create car entities' => array(        'title' => t('Create car'),        'description' => t('Allows users to create car.'),        'restrict access' => TRUE,      ),      'view any car entities' => array(        'title' => t('View car'),        'description' => t('Allows users to view cars.'),        'restrict access' => TRUE,      ),      'edit any car entities' => array(        'title' => t('Edit any cars'),        'description' => t('Allows users to edit any cars.'),        'restrict access' => TRUE,      ),      'edit own car entities' => array(        'title' => t('Edit own car'),        'description' => t('Allows users to edit own cars.'),        'restrict access' => TRUE,      ),      'delete car entities' => array(        'title' => t('Delete car'),        'description' => t('Allows admin to delete cars.'),        'restrict access' => TRUE,      ),      'update car entities' => array(        'title' => t('Update car'),        'description' => t('Allows admin to update cars.'),        'restrict access' => TRUE,      ),    );    return $permissions;}/** * Implements the uri callback. */function car_uri($car) {    return array(      'path' => 'car/' . $car->carid,    );}/** * Implements car_access() */function car_access($op, $entity, $account = NULL, $entity_type = 'car') {    global $user;    if (!isset($account)) {        $account = $user;    }    switch ($op) {        case 'create':            return user_access('administer car entities', $account)                || user_access('create car entities', $account);        case 'view':            return user_access('administer car entities', $account)                || user_access('view any car entities');        case 'edit':            return user_access('administer car entities')                || user_access('edit any car entities', $account);        case 'delete':            return user_access('administer car entities')                || user_access('delete car entities', $account);        case 'update':            return user_access('administer car entities')                || user_access('update any car entities', $account);    }}/** * Implements car_load() */function car_load($carid) {    $result = entity_load('car', array($carid));    return $result ? reset($result) : FALSE;}/** * Implements hook_form() */function car_form($form, &$form_state, $car, $op = 'edit') {    $form['model'] = array(      '#title' => 'Model',      '#description' => 'Model',      '#type' => 'textfield',      '#default_value' => isset($car->model) ? $car->model : '',      '#required' => true,    );    $form['year'] = array(      '#title' => 'Year',      '#description' => 'Creation year.',      '#type' => 'textfield',      '#default_value' => isset($car->year) ? $car->year : '',      '#required' => true,      '#size' => 4,    );    $form['color'] = array(      '#title' => 'Color',      '#description' => 'The color for a car',      '#type' => 'textfield',      '#default_value' => isset($car->color) ? $car->color : '',      '#required' => true,    );    $form['mileage'] = array(      '#title' => 'Mileage',      '#description' => 'The color for a car',      '#type' => 'textfield',      '#default_value' => isset($car->mileage) ? $car->mileage : '',      '#required' => true,    );    field_attach_form('car', $car, $form, $form_state);    $form['actions'] = array(      '#type' => 'actions',    );    $form['actions']['submit'] = array(      '#type' => 'submit',      '#value' => 'Save',    );    return $form;}/** * Implements validation for car_form */function car_form_validate($form, &$form_state) {    $car = entity_ui_form_submit_build_entity($form, $form_state);    field_attach_form_validate('car', $car, $form, $form_state);    if (40 < strlen($form_state['values']['model'])) {        form_set_error($form_state['values']['model'], t('Maximum length for field model must be less than 40 characters'));    }    if (4 < strlen($form_state['values']['year']) || !is_numeric($form_state['values']['year'])) {        form_set_error($form_state['values']['year'], t('Please, input valid year'));    }    if (20 < strlen($form_state['values']['color'])) {        form_set_error($form_state['values']['color'], t('Maximum length for field color must be less than 20 characters'));    }    if (!is_numeric($form_state['values']['mileage'])) {        form_set_error($form_state['values']['mileage'], t('Please, input valid mileage'));    }}/** * Implements submit function */function car_form_submit(&$form, &$form_state) {    $car = entity_ui_form_submit_build_entity($form, $form_state);    field_attach_submit('car', $car, $form, $form_state);    $file = (isset($car->car_image['und'][0]['fid'])) ? file_load($car->car_image['und'][0]['fid']) : "";    if ($file) {        $file->status = FILE_STATUS_PERMANENT;        file_save($file);        $photo_url = file_create_url($file->uri);        $car->save();        $car->car_image['und'][0]['uri'] = $photo_url;    }    if ($car->carid) {        // $car->fid = $car->car_image['und'][0]['fid'];    }    $car->save();    $form_state['redirect'] = 'admin/structure/car';}