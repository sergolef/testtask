<?php/** * Implements hook_entity_info() */function author_entity_info() {    return array(      'author' => array(        'label' => t('Author'),        'entity class' => 'Entity',        'controller class' => 'EntityAPIController',        'base table' => 'author',        'uri callback' => 'author_uri',        'entity keys' => array(          'id' => 'author_id',          'label' => 'first_name'        ),        'admin ui' => array(          'path' => 'admin/structure/author'        ),        'access callback' => 'author_access',        'module' => 'author',      ),    );}/** * Implements the uri callback. */function author_uri($author) {    return array(      'path' => 'author/' . $author->author_id,    );}/** * Implements hook_menu() */function author_menu() {    $items['admin/structure/author/list'] = array(      'title' => 'List',      'type' => MENU_DEFAULT_LOCAL_TASK,      'weight' => -10,    );    $items['author/%author'] = array(      'title' => t('Biography'),      'page callback' => 'author_base_view',      'page arguments' => array(1),      'access arguments' => array('view any author entities'),    );    return $items;}/** * Implements author_base_view() */function author_base_view($entity, $view_mode = 'full'){    $entity_type = 'author';    $entity->content = array(      '#view_mode' => $view_mode,      '#language' => NULL,    );    $name = ucfirst($entity->first_name) . ', '. ucfirst($entity->last_name) . " - ";    $bio = "<b>".$name."</b>".$entity->biography;    //set up some of our own data.    $entity->content['biography'] = array(      '#type' => 'item',      '#title' => t('...'),      '#markup' => $bio,      '#attributes'=>array('class'=>array('biography')),    );     // Now to invoke some hooks. We need the language code for    // hook_entity_view(), so let's get that.    global $language;    $langcode = $language->language;    // And now invoke hook_entity_view().    module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);    // Now invoke hook_entity_view_alter().    drupal_alter(array('author_base_view', 'entity_view'), $entity->content, $entity_type);    // And finally return the content.    return $entity->content;    }/** * Implements hook_permission(). */function author_permission() {    $permissions = array(      'administer author entities' => array(        'title' => t('Administer author'),        'description' => t('Allows users to administer author entity.'),        'restrict access' => TRUE,      ),      'create author entities' => array(        'title' => t('Create car'),        'description' => t('Allows users to create author.'),        'restrict access' => TRUE,      ),      'view any author entities' => array(        'title' => t('View author'),        'description' => t('Allows users to view authors.'),        'restrict access' => TRUE,      ),      'edit any author entities' => array(        'title' => t('Edit any authors'),        'description' => t('Allows users to edit any authors.'),        'restrict access' => TRUE,      ),      'edit own author entities' => array(        'title' => t('Edit own author'),        'description' => t('Allows users to edit own authors.'),        'restrict access' => TRUE,      ),      'delete author entities' => array(        'title' => t('Delete author'),        'description' => t('Allows admin to delete authors.'),        'restrict access' => TRUE,      ),      'update author entities' => array(        'title' => t('Update author'),        'description' => t('Allows admin to update authors.'),        'restrict access' => TRUE,      ),    );    return $permissions;}/** * Implements car_access() */function author_access($op, $entity, $account = NULL, $entity_type = 'author') {    global $user;    if (!isset($account)) {        $account = $user;    }    switch ($op) {        case 'create':            return user_access('administer author entities', $account)                || user_access('create author entities', $account);        case 'view':            return user_access('administer author entities', $account)                || user_access('view any author entities');        case 'edit':            return user_access('administer author entities')                || user_access('edit any author entities', $account);        case 'delete':            return user_access('administer author entities')                || user_access('delete author entities', $account);        case 'update':            return user_access('administer author entities')                || user_access('update any author entities', $account);    }}/** * Implements car_load() */function author_load($author_id) {    $result = entity_load('author', array($author_id));    return $result ? reset($result) : FALSE;}function author_form($form, &$form_state, $author, $op = 'edit') {    $form['first_name'] = array(      '#title' => 'First Name:',      '#description' => 'First author name',      '#type' => 'textfield',      '#default_value' => isset($author->first_name) ? $author->first_name : '',      '#required' => TRUE,    );    $form['last_name'] = array(      '#title' => 'Last Name',      '#description' => 'Last author name',      '#type' => 'textfield',      '#default_value' => isset($author->last_name) ? $author->last_name : '',      '#required' => TRUE,    );    $form['birthdate'] = array(      '#title' => 'Birthdate',      '#description' => 'Author birthdate (d-m-Y)',      '#type' => 'textfield',      '#default_value' => isset($author->birthdate) ? $author->birthdate : '',      '#required' => TRUE,    );    $form['main_genre'] = array(      '#title' => 'Genre',      '#description' => 'Main author genre',      '#type' => 'textfield',      '#default_value' => isset($author->main_genre) ? $author->main_genre : '',      '#required' => TRUE,    );    $form['books'] = array(      '#title' => 'Books',      '#description' => 'Books list of author',      '#type' => 'textarea',      '#default_value' => isset($author->books) ? $author->books : '',      '#required' => FALSE,    );    $form['biography'] = array(      '#title' => 'biography',      '#description' => 'Biography',      '#type' => 'textarea',      '#default_value' => isset($author->biography) ? $author->biography : '',      '#required' => TRUE,    );    $form['actions'] = array(      '#type' => 'actions',    );    $form['actions']['submit'] = array(      '#type' => 'submit',      '#value' => 'Save',    );    return $form;}/** * Implements validation author_form */function author_form_validate($form, &$form_state) {    if (50 < strlen($form_state['values']['first_name'])) {        form_set_error($form_state['values']['first_name'], t('Maximum length for field first_name must be less than 50 characters'));    }    if (50 < strlen($form_state['values']['last_name'])) {        form_set_error($form_state['values']['last_name'], t('Maximum length for field last_name must be less than 50 characters'));    }    if (!preg_match('/^\d{2}-\d{2}-\d{4}$/', $form_state['values']['birthdate'])) {          form_set_error($form_state['values']['birthdate'], t('Please, input valid birth date in format d-m-Y'));    }    if (empty($form_state['values']['main_genre'])) {        form_set_error($form_state['values']['mileage'], t('Please, input valid genre'));    }}/** * Implements hook_form_submit * @param type $form * @param array $form_state */function author_form_submit(&$form, &$form_state) {    $author = entity_ui_form_submit_build_entity($form, $form_state);    $author->save();    $form_state['redirect'] = 'admin/structure/author';}