<?php

/**
 * Implements of hook_services_services().
 */
function car_services_resources() {
    return array(
      'car' => array(
        'retrieve' => array(
          'help' => 'Retrieves a car',
          'callback' => '_car_service_retrieve',
          'access callback' => '_car_service_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'carid',
              'type' => 'int',
              'description' => 'The id of the note to get',
              'source' => array('path' => '0'),
              'optional' => FALSE,
            ),
          ),
        ),
        'create' => array(
          'help' => 'Creates a car',
          'callback' => '_car_service_create',
          'access arguments' => array('car service create'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'data',
              'type' => 'struct',
              'description' => 'The car object',
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        ),
        'update' => array(
          'help' => 'Updates a car',
          'callback' => '_car_service_update',
          'access callback' => '_car_service_access',
          'access arguments' => array('update'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'carid',
              'type' => 'int',
              'description' => 'The id of the node to update',
              'source' => array('path' => '0'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'data',
              'type' => 'struct',
              'description' => 'The note data object',
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        ),
        'delete' => array(
          'help' => 'Deletes a car',
          'callback' => '_car_service_delete',
          'access callback' => '_car_service_access',
          'access arguments' => array('delete'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'carid',
              'type' => 'int',
              'description' => 'The id of the note to delete',
              'source' => array('path' => '0'),
              'optional' => FALSE,
            ),
          ),
        ),
        'index' => array(
          'help' => 'Retrieves a listing of cars',
          'callback' => '_car_service_index',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'page',
              'optional' => TRUE,
              'type' => 'int',
              'description' => 'The zero-based index of the page to get, defaults to 0.',
              'default value' => 0,
              'source' => array('param' => 'page'),
            ),
            array(
              'name' => 'fields',
              'optional' => TRUE,
              'type' => 'string',
              'description' => 'The fields to get.',
              'default value' => '*',
              'source' => array('param' => 'fields'),
            ),
            array(
              'name' => 'parameters',
              'optional' => TRUE,
              'type' => 'array',
              'description' => 'Parameters array',
              'default value' => array(),
              'source' => array('param' => 'parameters'),
            ),
            array(
              'name' => 'pagesize',
              'optional' => TRUE,
              'type' => 'init',
              'description' => 'Number of records to get per page.',
              'default value' => variable_get('services_node_index_page_size', 20),
              'source' => array('param' => 'pagesize'),
            ),
          ),
        ),
      ),
    );
}

/**
 * Return the results of entity_load('car', $id) by id
 * @param $id carid of the car we want to return.
 * @return return car object or false if not found
 */
function _car_service_retrieve($id) {

    $car = entity_load('car', array('carid' => $id));

    return array(
      'car' => $car,
    );
}

/**
 * Implements data validator for create and update car entity
 */
function _car_data_validate($data) {
    if (!isset($data['model'])) {
        return array('description' => 'Missing car attribute model', 'code' => 406);
    }
    if (!isset($data['year'])) {
        return array('description' => 'Missing car attribute yesr', 'code' => 406);
    }
    if (!isset($data['color'])) {
        return array('description' => 'Missing car attribute color', 'code' => 406);
    }
    if (!isset($data['mileage'])) {
        return array('description' => 'Missing car attribute mileage', 'code' => 406);
    }

    if (40 < strlen($data['model'])) {
        return array('description' => 'Maximum length for field model must be less than 40 characters', 'code' => 406);
    }
    if (4 < strlen($data['year']) || !is_numeric($data['year'])) {
        return array('description' => 'Please, input valid year', 'code' => 406);
    }
    if (20 < strlen($data['color'])) {
        return array('description' => 'Maximum length for field color must be less than 20 characters', 'code' => 406);
    }
    if (!is_numeric($data['mileage'])) {
        return array('description' => 'Please, input valid mileage', 'code' => 406);
    }
    return FALSE;
}

/**
 * Implements function for create custom entity throw POST request
 * like this: http://domain/endpoint/car/ and set header Content-Type:application/x-www-form-urlencodedparameters  
 * Input parameters on request body like this: {"model":"test34","year":"1234", "color":"green", "mileage":"23"}
 * @params $data - array of car data
 * @return return result = 1 or null with error in header if false
 */
function _car_service_create($data) {

    $error = _car_data_validate($data);
    //return $error;
    if (FALSE != $error) {
        return services_error($error['description'], $error['code']);
    }

    $primary_key = !empty($data->carid) ? array('carid') : array();
    $result = drupal_write_record('cartbl', $data, $primary_key);
    if (0 != $result) {
        return array(
          'result' => TRUE,
        );
    }
    return services_error('Error car creation!', 303);
}

/**
 * Implements function for update custom entity throw PUT request
 * for example: http://localhost/drup/service/car/2
 * add header application/json
 * set params in json format - {"model":"test", "color":"test", "year":2000, "mileage":23456}
 * @param $carid - id of car
 * @param $data - data struct for update
 * @return true or error on fail
 */
function _car_service_update($carid, $data) {
    //return $data;
    if (!$carid) {
        return services_error('Please, provide car id for upadating!', 406);
    }
    $error = _car_data_validate($data);
    //return $error;
    if (false != $error) {
        return services_error($error['description'], $error['code']);
    }

    $primary_key = !empty($carid) ? array('carid') : array();
    $data['carid'] = $carid;

    $result = drupal_write_record('cartbl', $data, $primary_key);

    if (0 != $result) {
        return array(
          'result' => TRUE,
        );
    }
    return services_error('Error car updating!', 303);
}

/**
 * this function delete a car entity given its carid.
 * @param $carid CAR ID of the car we're deleting.
 * @return The node's nid.
 */
function _car_service_delete($carid) {
    $result = entity_delete('car', $carid);
    if (null == $result) {
        return array(
          'result' => TRUE,
        );
    }
    return services_error('Error car deleting!', 303);
}

/**
 * Return an array of optionally paged carids baed on a set of criteria.
 * An example request might look like
 * http://domain/endpoint/cars?fields=year,model&page=0&pagesize=2
 * This would return an array of objects with only model, color and year defined, of range 1 - 10 item
 * @param $page  Page number of results to return (in pages of 20).
 * @param $fields  The fields you want returned.
 * @param $parameters   An array containing fields and values used to build a sql WHERE clause indicating items to retrieve.
 * @param $page_size Integer number of items to be returned.
 * @return An array of car objects.
 */
function _car_service_index($page, $fields, $parameters, $page_size) {

    module_load_include('inc', 'services', 'services.module');
    $car_select = db_select('cartbl', 't')
        ->orderBy('model', 'DESC')
        ->orderBy('year', 'DESC');

    services_resource_build_index_query($car_select, $page, $fields, $parameters, $page_size, 'car');
    $results = services_resource_execute_index_query($car_select);
    $responce = services_resource_build_index_list($results, 'car', 'carid');

    if (is_array($responce)) {
        foreach ($responce as $car) {
            unset($car->uri);
        }
    }
    return $responce;
}

/**
 * Implements access func
 */
function _car_service_access($op, $args) {
    $access = TRUE;
    return $access;
}